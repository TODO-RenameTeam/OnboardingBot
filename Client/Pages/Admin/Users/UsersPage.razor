@page "/admin/users"
@using OnboardingBot.Shared.ViewModels
@using Refit
@using OnboardingBot.Shared.APIs
@using OnboardingBot.Shared.Extensions
@using System.ComponentModel.DataAnnotations
@using OnboardingBot.Shared.Models

@layout AdminLayout

<PageTitle>Сотрудники</PageTitle>

<MudGrid>
    <MudItem>
        <MudFab DisableElevation="true"
                StartIcon="@Icons.Material.Filled.ArrowBack"
                Size="Size.Small"
                Text="Домой" Href="/admin" Label="Домой"/>
    </MudItem>
    <MudItem>
        <MudText Typo="Typo.h3" GutterBottom="true">Сотрудники</MudText>
    </MudItem>
    <MudItem>
        <MudFab StartIcon="@Icons.Material.Filled.Add"
                Size="Size.Small"
                Color="Color.Success"
                Label="Добавить"
                Text="Добавить"
                DisableElevation="true"
                Href="/admin/users/create"/>
    </MudItem>
</MudGrid>

<MudPaper>
    <MudTable Items="@Models">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.LastName)">Фамилия</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.FirstName)">Имя</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.MiddleName)">Отчество</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.Role)">Роль</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.Position)">Должность</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.TelegramID)">Статус привязки</MudTableSortLabel>
            </MudTh>
            <MudTh>
                Действия
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                @context.LastName
            </MudTd>
            <MudTd>
                @context.FirstName
            </MudTd>
            <MudTd>
                @context.MiddleName
            </MudTd>
            <MudTd>
                @(context.Role.GetAttribute<DisplayAttribute, UserRole>().Name)
            </MudTd>
            <MudTd>
                @if (context.Position == null)
                {
                    <MudChip Color="Color.Warning" Size="Size.Small">Должность не указана</MudChip>
                }
                else
                {
                    @context.Position.Name
                }
            </MudTd>
            <MudTd>
                <MudChip Color="@(context.TelegramID == null ? Color.Error : Color.Success)" Size="Size.Small">
                    @(context.TelegramID == null ? "Не привязан к ТГ" : "Привязан к ТГ")
                </MudChip>
            </MudTd>
            <MudTd>
                <MudButton Size="Size.Small" Color="Color.Warning" Href="@($"/admin/users/{context.ID}/edit")">Изменить</MudButton>
                <MudButton Size="Size.Small" Color="Color.Success" OnClick="(() => OnGenerateCode(context))">
                    @(context.TelegramID == null ? "Привязать ТГ" : "Перепривязать ТГ")
                </MudButton>
                <MudButton Size="Size.Small" Color="Color.Error" OnClick="(() => OnDeleteModel(context))">Удалить</MudButton>
                @if (context.TelegramID != null)
                {
                    <MudButton Size="Size.Small" Color="Color.Success" StartIcon="@Icons.Material.Filled.Send" Href="@($"/admin/users/{context.ID}/sent")">Отправить сообщение</MudButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>
<MudOverlay @bind-Visible="@OverlayIsVisible" DarkBackground="true">
    <MudGrid>
        <MudItem xs="12">
            <MudFab IconSize="Size.Small" StartIcon="@Icons.Material.Filled.Close"
                    OnClick="() => { OverlayIsVisible = false; }">
            </MudFab>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="pa-2">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText>Сотрудник <b>@OverlayUser?.FullName</b></MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Код привязки: @OverlayTelegramCode?.Code</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudOverlay>

@code
{
    private List<UserViewModel> Models { get; set; } = new();

    [Inject]
    private IUserController ModelController { get; set; }

    [Inject]
    private ITelegramCodeController TelegramCodeController { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }


    private bool OverlayIsVisible { get; set; } = false;
    public UserViewModel? OverlayUser { get; set; } = null!;
    public TelegramCodeViewModel? OverlayTelegramCode { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Models = await ModelController.GetAll();
        }
        catch (ApiException e)
        {
            Console.WriteLine(e);
    // throw;
        }
    }

    private async Task OnDeleteModel(UserViewModel model)
    {
        var result = await DialogService.ShowMessageBox("Подтверждение",
            $"Вы точно хотите удалить {model.FullName}?", "Да", "Нет");

        if (!result.GetValueOrDefault(false))
        {
            return;
        }

        try
        {
            await ModelController.Delete(model.ID);
            Models = await ModelController.GetAll();
            Snackbar.Add("Сотрудник успешно удалён!", Severity.Success);
        }
        catch (ValidationApiException validationException)
        {
            Snackbar.Add(validationException.Content.Detail, Severity.Error);
        }
    }

    private async Task OnGenerateCode(UserViewModel model)
    {
        try
        {
            OverlayTelegramCode = await TelegramCodeController.Generate(model.ID);
            OverlayUser = model;

            OverlayIsVisible = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
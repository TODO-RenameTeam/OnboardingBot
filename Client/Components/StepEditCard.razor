@* @using Refit *@
@* @using AutoMapper *@
@* @using OnboardingBot.Shared.APIs *@
@* @using OnboardingBot.Shared.EditModels *@
@* @using OnboardingBot.Shared.ViewModels *@
@* @using System.ComponentModel.DataAnnotations *@
@* @using OnboardingBot.Shared.Extensions *@
@* *@
@* <MudGrid> *@
@*     <MudItem xs="12"> *@
@*         <EditForm Model="@Model" OnValidSubmit="OnValidSumbit"> *@
@*             <DataAnnotationsValidator/> *@
@*             <MudCard> *@
@*                 <MudCardContent> *@
@*                     <MudTextField Label="Название" @bind-Value="Model.Name" For="() => Model.Name"/> *@
@*                     <MudTextField Label="Отправляемый текст" @bind-Value="Model.Text" *@
@*                                   For="() => Model.Text"/> *@
@*                     $1$ Зона ссылок #1# *@
@*                     <MudStack Row="true" Spacing="5"> *@
@*                         <MudAutocomplete T="string"></MudAutocomplete> *@
@*                     </MudStack> *@
@*                     <MudNumericField *@
@*                         Label="Кол-во квизов" *@
@*                         @bind-Value="@Model.QuizesCount" *@
@*                         For="() => Model.QuizesCount"/> *@
@*                 </MudCardContent> *@
@*                 <MudCardActions> *@
@*                     <MudFab QuizType="QuizType.Submit" *@
@*                             Variant="Variant.Filled" *@
@*                             DisableElevation="true" *@
@*                             StartIcon="@Icons.Material.Filled.Save" *@
@*                             Text="Сохранить" *@
@*                             Color="Color.Primary"/> *@
@*                 </MudCardActions> *@
@*             </MudCard> *@
@*         </EditForm> *@
@*     </MudItem> *@
@* *@
@*     <MudItem xs="12" sm="6"> *@
@*         $1$ Зона квизов #1# *@
@*         <MudFab StartIcon="@Icons.Material.Filled.Add" *@
@*                 Color="Color.Success" *@
@*                 Size="Size.Small" Text="Добавить кнопку" *@
@*                 Label="Добавить кнопку" *@
@*                 DisableElevation="true" *@
@*                 OnClick="AddQuiz"/> *@
@*         <MudTable Items="@Model.Quizes" Dense="true" *@
@*                   RowEditPreview="BackupItem" *@
@*                   RowEditCancel="ResetItemToOriginalValues" *@
@*                   CanCancelEdit="true"> *@
@*             <ToolBarContent> *@
@*                 <MudText Typo="Typo.h6">Кнопки</MudText> *@
@*                 <MudSpacer/> *@
@*             </ToolBarContent> *@
@*             <HeaderContent> *@
@*                 <MudTh> *@
@*                 </MudTh> *@
@*                 <MudTh> *@
@*                     <MudTableSortLabel SortBy="new Func<QuizViewModel, object>(x => x.Name)">Название</MudTableSortLabel> *@
@*                 </MudTh> *@
@*                 <MudTh> *@
@*                     Ключ *@
@*                 </MudTh> *@
@*                 <MudTh> *@
@*                     <MudTableSortLabel SortBy="new Func<QuizViewModel, object>(x => x.)">Тип кнопки</MudTableSortLabel> *@
@*                 </MudTh> *@
@*                 <MudTh> *@
@*                     Действие *@
@*                 </MudTh> *@
@*             </HeaderContent> *@
@*             <RowTemplate Context="button"> *@
@*                 <MudTd DataLabel="Название кнопки">@button.Text</MudTd> *@
@*                 <MudTd DataLabel="Ключ">@button.Key</MudTd> *@
@*                 <MudTd DataLabel="Тип кнопки">@(button.Type.GetAttribute<DisplayAttribute, OnboardingBot.Shared.Models.QuizType>().Name)</MudTd> *@
@*                 <MudTd DataLabel="Действие"> *@
@*                     <MudFab Text="Удалить" Label="Удалить" *@
@*                             Size="Size.Small" *@
@*                             Color="Color.Error" *@
@*                             StartIcon="@Icons.Material.Filled.Delete" *@
@*                             OnClick="() => RemoveQuiz(button)" *@
@*                             DisableElevation="true"/> *@
@* *@
@*                 </MudTd> *@
@*             </RowTemplate> *@
@*             <RowEditingTemplate Context="button"> *@
@*                 <MudTd DataLabel="Название кнопки"> *@
@*                     <MudTextField T="string" *@
@*                                   Label="Название кнопки" *@
@*                                   @bind-Value="@button.Name" *@
@*                                   Required="true"/> *@
@*                 </MudTd> *@
@*                 <MudTd DataLabel="Ключ"> *@
@*                     <MudTextField T="string" *@
@*                                   Label="Ключ" *@
@*                                   @bind-Value="@button.Key" *@
@*                                   Required="true"/> *@
@*                 </MudTd> *@
@*                 <MudTd DataLabel="Тип кнопки"> *@
@*                     <MudAutocomplete @bind-Value="@button.Type" *@
@*                                      Label="Тип кнопки" *@
@*                                      SearchFunc="@SearchQuizType" *@
@*                                      ToStringFunc=@(x => x.GetAttribute<DisplayAttribute, OnboardingBot.Shared.Models.QuizType>().Name)> *@
@*                          *@
@*                     </MudAutocomplete> *@
@*                 </MudTd> *@
@*             </RowEditingTemplate> *@
@*         </MudTable> *@
@*     </MudItem> *@
@* </MudGrid> *@
@* *@
@* @code *@
@* { *@
@*     [Parameter] *@
@*     public Guid? ID { get; set; } *@
@* *@
@*     public bool IsEdit => ID != null; *@
@* *@
@*     public string PageTitle => IsEdit ? "Изменение текстовой команды" : "Создание текстовой команды"; *@
@* *@
@*     public StepEditModel Model { get; set; } = new(); *@
@* *@
@*     [Inject] *@
@*     public IStepController ModelController { get; set; } *@
@* *@
@*     [Inject] *@
@*     public IMapper Mapper { get; set; } *@
@* *@
@*     [Inject] *@
@*     private NavigationManager NavigationManager { get; set; } *@
@* *@
@*     [Inject] *@
@*     private ISnackbar Snackbar { get; set; } *@
@* *@
@*     public List<OnboardingBot.Shared.Models.QuizType> QuizTypes { get; set; } = new(Enum.GetValues<OnboardingBot.Shared.Models.QuizType>()); *@
@* *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await LoadDates(); *@
@*     } *@
@* *@
@*     private async Task<IEnumerable<OnboardingBot.Shared.Models.QuizType>> SearchQuizType(string arg) *@
@*     { *@
@*         if (string.IsNullOrWhiteSpace(arg)) *@
@*         { *@
@*             return QuizTypes; *@
@*         } *@
@* *@
@*         return QuizTypes.Where(x => *@
@*             x.GetAttribute<DisplayAttribute, OnboardingBot.Shared.Models.QuizType>().Name *@
@*                 .Contains(arg, StringComparison.InvariantCultureIgnoreCase)); *@
@*     } *@
@* *@
@*     private async Task LoadDates() *@
@*     { *@
@*         try *@
@*         { *@
@*             if (IsEdit) *@
@*             { *@
@*                 Model = Mapper.Map<StepEditModel>(await ModelController.GetByID(ID.GetValueOrDefault())); *@
@*             } *@
@*         } *@
@*         catch (ApiException e) *@
@*         { *@
@*             Console.WriteLine(e); *@
@*         } *@
@*     } *@
@* *@
@*     private async Task OnValidSumbit() *@
@*     { *@
@*         try *@
@*         { *@
@*             var result = IsEdit *@
@*                 ? await ModelController.Update(ID.GetValueOrDefault(), Model) *@
@*                 : await ModelController.Create(Model); *@
@* *@
@*             Model = Mapper.Map<StepEditModel>(result); *@
@*             NavigationManager.NavigateTo($"/admin/textcommands/{result.ID}/edit"); *@
@*             Snackbar.Add("Текстовая команда успешно сохранена"); *@
@*         } *@
@*         catch (ValidationApiException validationException) *@
@*         { *@
@*             Snackbar.Add(validationException.Content.Detail, Severity.Error); *@
@*         } *@
@*         catch (ApiException exception) *@
@*         { *@
@*             Snackbar.Add(exception.RequestMessage.Content.ToString(), Severity.Error); *@
@*         } *@
@*     } *@
@* *@
@* *@
@*     private QuizViewModel QuizBeforeEdit { get; set; } *@
@* *@
@*     private void AddQuiz() *@
@*     { *@
@*         Model.Quizs.Add(new() *@
@*         { *@
@*         }); *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@*     private void RemoveQuiz(QuizViewModel button) *@
@*     { *@
@*         Model.Quizs.Remove(button); *@
@*     } *@
@* *@
@*     private void BackupItem(object element) *@
@*     { *@
@*         QuizBeforeEdit = new() *@
@*         { *@
@*             ID = ((QuizViewModel)element).ID, *@
@*             Name = ((QuizViewModel)element).Name, *@
@*             Key = ((QuizViewModel)element).Key, *@
@*             Type = ((QuizViewModel)element).Type, *@
@*         }; *@
@*     } *@
@* *@
@*     private void ResetItemToOriginalValues(object element) *@
@*     { *@
@*         ((QuizViewModel)element).ID = QuizBeforeEdit.ID; *@
@*         ((QuizViewModel)element).Name = QuizBeforeEdit.Name; *@
@*         ((QuizViewModel)element).Key = QuizBeforeEdit.Key; *@
@*         ((QuizViewModel)element).Type = QuizBeforeEdit.Type; *@
@*     } *@
@* } *@